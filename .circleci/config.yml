version: 2.1

# commands:
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroy environments
#           when: on_fail
#           command: |
#             # Your code here
#             aws cloudformation delete-stack \
#               -- stack-name "udapeople-backend-<< parameters.workflow_id >>"
#             aws cloudformation delete-stack \
#               -- stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" \
#             --recursive
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           when: on_fail
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS=$(curl "https://kvdb.io/LHFkzdfqGQiT5AocazCCLL//migration_<<parameters.workflow_id>>" -H "X-Api-Key: ${THISDB_API_KEY}")
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#               then
#               cd ~/project/backend
#               npm install
#               npm run migrations:revert            
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/backend/dist
      #       - project/backend/node_modules
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
        - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test-frontend
          command: |
            cd frontend
            npm install
            npm test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test-backend
          command: |
            cd backend
            npm install
            npm test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          working_directory: ./frontend
          command: |
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          working_directory: ./backend
          command: |
            npm install
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical

#   deploy-infrastructure:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#               --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
#               --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
#               --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
#               exit 1
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances \
#             --query 'Reservations[*].Instances[*].PublicIpAddress' \
#             --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#             --output text >> ~/project/.circleci/ansible/inventory.txt
#             cat ~/project/.circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure      
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#   configure-infrastructure:
#     docker:
#       - image: python:3.7-alpine3.11
#     steps:
#       - checkout
#       - add_ssh_keys:
#           fingerprints: ["45:44:e9:b4:35:84:f7:3f:e3:f9:5f:e5:a0:95:2a:b1"]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add curl
#             apk add --upgrade bash
#             apk add --update ansible
#             apk add openssh-client
#             pip3 install awscli
#       - run:
#           name: Configure server
#           command: |
#             cat ~/project/.circleci/ansible/inventory.txt
#             export ANSIBLE_HOST_KEY_CHECKING=False
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml

#       # Here's where you will add some code to rollback on failure      
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#   run-migrations:
#     docker:
#       - image: sleavely/node-awscli:14.x
#     steps:
#       - checkout
#       - run:
#           name: Run migrations
#           command: |
#             cd backend
#             cat .env
#             npm i
#             npm run build
#             npm run migrations
#       - run:
#           name: Send migration results to memstash
#           command: |
#             echo "has been done successfully" > ./migration_status.txt
#             pwd && ls -al
#             if grep -q "has been done successfully" ./migration_status.txt 
#             then 
#               echo "has been done successfully"
#               curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "1" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
#             else
#               echo "has failed"
#               curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "0" https://api.memstash.io/values/migrations-${CIRCLE_WORKFLOW_ID:0:7}
#             fi
#      # Here's where you will add some code to rollback on failure      
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: sleavely/node-awscli:14.x
#     steps:
#       # Checkout code from git
#       - checkout
#       - attach_workspace:
#           at: /root
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: python:3.7-alpine3.11
#         environment:
#             NODE_ENV: "local"
#             VERSION: "1"
#             ENVIRONMENT: "production"
#             TYPEORM_CONNECTION: $TYPEORM_CONNECTION
#             TYPEORM_HOST: $TYPEORM_HOST
#             TYPEORM_USERNAME: $TYPEORM_USERNAME
#             TYPEORM_PASSWORD: $TYPEORM_PASSWORD
#             TYPEORM_DATABASE: $TYPEORM_DATABASE
#             TYPEORM_PORT: $TYPEORM_PORT
#             TYPEORM_ENTITIES: $TYPEORM_ENTITIES
#     steps:
#       # Checkout code from git
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints: ["eb:8c:c3:a9:4b:36:3f:c7:69:df:e2:36:d3:22:f5:ed"]
#       # attach workspace
#       - attach_workspace:
#           at: /root
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible rsync 
#             apk add curl
#             pip3 install awscli
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#             ls /root
#             ls /root/project/backend/
#             cat ~/project/.circleci/ansible/inventory.txt
#             ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
      
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#       - image: python:3.7-alpine3.11
#     steps:
#       # Checkout code from git
#       - checkout
#       - attach_workspace:
#           at: /root
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#             apk add --update curl
#             pip install awscli                                         
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#               WorkflowID=$(aws cloudformation \
#             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#             --no-paginate --output text)
#             curl -H "Content-Type: text/plain" -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request PUT --data "$WorkflowID" https://api.memstash.io/values/workflowid
      
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --tags project=circleci-${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name "udapeople-cloudfrontstack" \
#               --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
#       - revert-migrations:
#           workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

# cleanup:
#     docker:
#       # Docker image here
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Get old stack workflow id
#           command: |
#             # your code here
#             export OldWorkflowID="the id here"
#             export STACKS=[] #put the list of stacks here

#    OldWorkflowID=$(curl -H "token: ecdfc255-81e1-4056-9efa-2d7fa10812e1" --request GET https://api.memstash.io/values/workflowid)
#             CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #     filters:
      #       branches:
      #         only: [test-feature-branch]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]